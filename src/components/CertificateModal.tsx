import React, { useState, useRef } from 'react';

/**
 * Props for CertificateModal component
 */
interface CertificateModalProps {
  data: {
    image: string;
    location: {
      latitude: number;
      longitude: number;
    };
    date: string;
    time: string;
  };
  onClose: () => void;
}

/**
 * CertificateModal component displays generated certificates
 * Includes Twitter sharing functionality with image attachment and download option
 */
const CertificateModal: React.FC<CertificateModalProps> = ({ data, onClose }) => {
  const [isPreparingShare, setIsPreparingShare] = useState(false);
  const [certificateBlob, setCertificateBlob] = useState<Blob | null>(null);
  const certificateUrlRef = useRef<string | null>(null);

  /**
   * Generates Twitter share URL with pre-written content
   */
  const generateTwitterShare = () => {
    const tweetText = `üö® Pothole Reported! üìç Location: ${data.location.latitude.toFixed(4)}, ${data.location.longitude.toFixed(4)} üìÖ ${data.date} ‚è∞ ${data.time}

Please take necessary action to fix this pothole. Report potholes at Pothole Indi and make our roads safer!

#PotholeIndi #RoadSafety #India`;
    const encodedText = encodeURIComponent(tweetText);
    return `https://twitter.com/intent/tweet?text=${encodedText}`;
  };

  /**
   * Creates certificate as a Blob for sharing
   */
  const createCertificateBlob = (): Promise<Blob> => {
    return new Promise((resolve, reject) => {
      // Create canvas element
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      if (!ctx) {
        reject(new Error('Could not get canvas context'));
        return;
      }

      // Set canvas dimensions
      canvas.width = 800;
      canvas.height = 1000;

      // White background
      ctx.fillStyle = '#FFFFFF';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Add border
      ctx.strokeStyle = '#000000';
      ctx.lineWidth = 4;
      ctx.strokeRect(10, 10, canvas.width - 20, canvas.height - 20);

      // Add decorative elements
      ctx.fillStyle = '#ff9933'; // Saffron color
      ctx.fillRect(0, 0, canvas.width, 30);
      ctx.fillStyle = '#ffffff'; // White color
      ctx.fillRect(0, 30, canvas.width, 30);
      ctx.fillStyle = '#138808'; // Green color
      ctx.fillRect(0, 60, canvas.width, 30);

      // Title
      ctx.fillStyle = '#000000';
      ctx.font = 'bold 36px Inter';
      ctx.textAlign = 'center';
      ctx.fillText('POTHOLE REPORT CERTIFICATE', canvas.width / 2, 130);

      // Official statement
      ctx.font = '20px Inter';
      ctx.fillText('Official Report - Pothole Indi Initiative', canvas.width / 2, 170);

      // Divider
      ctx.beginPath();
      ctx.moveTo(50, 200);
      ctx.lineTo(canvas.width - 50, 200);
      ctx.stroke();

      // Date and Time
      ctx.font = '18px Inter';
      ctx.fillText(`Reported on: ${data.date} at ${data.time}`, canvas.width / 2, 240);

      // Location
      ctx.font = '16px Inter';
      ctx.fillText(`Location: ${data.location.latitude.toFixed(6)}, ${data.location.longitude.toFixed(6)}`, canvas.width / 2, 270);

      // Add Google Maps link text
      const mapsLink = `https://maps.google.com/?q=${data.location.latitude},${data.location.longitude}`;
      ctx.font = '14px Inter';
      ctx.fillStyle = '#0066CC';
      ctx.fillText(mapsLink, canvas.width / 2, 290);

      // Add pothole image placeholder (will be replaced if image loads)
      ctx.fillStyle = '#F0F0F0';
      ctx.fillRect(150, 320, 500, 300);
      ctx.fillStyle = '#666666';
      ctx.font = '16px Inter';
      ctx.fillText('Pothole Image', canvas.width / 2, 470);
      ctx.fillStyle = '#999999';
      ctx.font = '14px Inter';
      ctx.fillText('(Image from your report)', canvas.width / 2, 490);

      // Add logo placeholders
      ctx.fillStyle = '#F0F0F0';
      ctx.fillRect(50, 650, 100, 100);
      ctx.fillStyle = '#000000';
      ctx.font = '12px Inter';
      ctx.fillText('Official Logo', 100, 710);

      ctx.fillStyle = '#F0F0F0';
      ctx.fillRect(600, 650, 200, 200);
      ctx.fillStyle = '#000000';
      ctx.font = '12px Inter';
      ctx.fillText('PM Modi', 700, 760);

      // Government message
      ctx.fillStyle = '#000000';
      ctx.font = 'bold 16px Inter';
      ctx.textAlign = 'center';
      ctx.fillText('"Building safer roads for a better India"', canvas.width / 2, 870);
      ctx.font = '14px Inter';
      ctx.fillText('- Pothole Indi Initiative', canvas.width / 2, 890);

      // Footer
      ctx.fillStyle = '#000000';
      ctx.font = '14px Inter';
      ctx.fillText('Generated by Pothole Indi - Making Indian roads safer', canvas.width / 2, 940);
      ctx.fillText('Report more at: pothole-indi.vercel.app', canvas.width / 2, 960);
      ctx.fillText('Certificate ID: PI-' + Date.now(), canvas.width / 2, 980);

      // Create a helper function to load images with proper CORS handling
      const loadImage = (src: string): Promise<HTMLImageElement> => {
        return new Promise((resolve, reject) => {
          const img = new Image();
          img.crossOrigin = 'Anonymous';
          img.onload = () => resolve(img);
          img.onerror = () => reject(new Error(`Failed to load image: ${src}`));
          img.src = src;
        });
      };

      // Load all images and draw them on the canvas
      Promise.all([
        loadImage(data.image).catch(() => null) // Pothole image (may fail due to CORS)
      ])
        .then(([potholeImg]) => {
          // Draw pothole image if loaded successfully
          if (potholeImg) {
            try {
              ctx.drawImage(potholeImg, 150, 320, 500, 300);
            } catch (e) {
              console.warn('Failed to draw pothole image:', e);
            }
          }

          // Convert canvas to blob
          canvas.toBlob((blob) => {
            if (blob) {
              resolve(blob);
            } else {
              reject(new Error('Failed to create blob from canvas'));
            }
          }, 'image/png');
        })
        .catch((error) => {
          console.error('Error loading images:', error);
          // Even if images fail to load, still create the certificate with placeholders
          canvas.toBlob((blob) => {
            if (blob) {
              resolve(blob);
            } else {
              reject(new Error('Failed to create blob from canvas'));
            }
          }, 'image/png');
        });
    });
  };

  /**
   * Downloads the certificate as an image
   */
  const downloadCertificate = async () => {
    try {
      // Create blob if not already created
      let blob = certificateBlob;
      if (!blob) {
        blob = await createCertificateBlob();
        setCertificateBlob(blob);
      }

      // Create download link
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.download = `pothole-certificate-${data.date.replace(/\//g, '-')}.png`;
      link.href = url;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Clean up
      setTimeout(() => URL.revokeObjectURL(url), 100);
    } catch (error) {
      console.error('Error downloading certificate:', error);
      
      // Show error message to user
      alert('Failed to download certificate. Please try again.');
    }
  };

  /**
   * Prepares certificate for sharing on Twitter with image
   * Downloads the certificate and provides sharing instructions
   */
  const prepareTwitterShareWithImage = async () => {
    setIsPreparingShare(true);
    
    try {
      // Create blob if not already created
      let blob = certificateBlob;
      if (!blob) {
        blob = await createCertificateBlob();
        setCertificateBlob(blob);
      }

      // Create object URL for the blob
      if (certificateUrlRef.current) {
        URL.revokeObjectURL(certificateUrlRef.current);
      }
      certificateUrlRef.current = URL.createObjectURL(blob);
      
      // Download the certificate
      const link = document.createElement('a');
      link.download = `pothole-certificate-${data.date.replace(/\//g, '-')}.png`;
      link.href = certificateUrlRef.current;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Give some time for the download to start
      setTimeout(() => {
        // Open Twitter with pre-filled text
        window.open(generateTwitterShare(), '_blank');
        setIsPreparingShare(false);
      }, 1500);
    } catch (error) {
      console.error('Error preparing Twitter share:', error);
      setIsPreparingShare(false);
      // Show error message to user
      alert('Failed to prepare certificate for sharing. Please try downloading the certificate directly and share it manually.');
    }
  };

  // Clean up object URLs on unmount
  React.useEffect(() => {
    return () => {
      if (certificateUrlRef.current) {
        URL.revokeObjectURL(certificateUrlRef.current);
      }
    };
  }, []);

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-2xl w-full max-h-screen overflow-y-auto">
        {/* Header */}
        <div className="bg-black text-white p-4 rounded-t-lg flex justify-between items-center">
          <h2 className="text-xl font-bold">Pothole Report Certificate</h2>
          <button
            onClick={onClose}
            className="text-white hover:text-gray-300 text-2xl"
          >
            √ó
          </button>
        </div>

        {/* Certificate Content */}
        <div className="p-6">
          {/* Certificate Details */}
          <div className="bg-gray-50 p-4 rounded-lg mb-4">
            <h3 className="text-lg font-semibold mb-2">Certificate Details</h3>
            <div className="space-y-2 text-sm">
              <p><strong>Reported on:</strong> {data.date} at {data.time}</p>
              <p><strong>Location:</strong> {data.location.latitude.toFixed(6)}, {data.location.longitude.toFixed(6)}</p>
              <p>
                <strong>Google Maps:</strong>{' '}
                <a
                  href={`https://maps.google.com/?q=${data.location.latitude},${data.location.longitude}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-blue-600 hover:underline"
                >
                  View on Map
                </a>
              </p>
            </div>
          </div>

          {/* Image Preview */}
          <div className="mb-4">
            <h3 className="text-lg font-semibold mb-2">Pothole Image</h3>
            <img
              src={data.image}
              alt="Reported pothole"
              className="w-full h-64 object-cover rounded-lg border border-gray-200"
            />
          </div>

          {/* Certificate Preview */}
          <div className="mb-4 bg-gradient-to-b from-orange-500 via-white to-green-500 p-1 rounded-lg">
            <div className="bg-white p-6 rounded-lg">
              <div className="text-center mb-6">
                <div className="w-20 h-20 mx-auto mb-2 bg-gray-200 rounded-lg flex items-center justify-center">
                  <span className="text-xs text-gray-500">Logo</span>
                </div>
                <h3 className="text-xl font-bold">POTHOLE REPORT CERTIFICATE</h3>
                <p className="text-sm text-gray-600">Official Report - Pothole Indi Initiative</p>
              </div>
              
              <div className="border-t border-b border-gray-200 py-4 my-4">
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <p className="font-semibold">Date & Time</p>
                    <p>{data.date} at {data.time}</p>
                  </div>
                  <div>
                    <p className="font-semibold">Location</p>
                    <p>{data.location.latitude.toFixed(6)}, {data.location.longitude.toFixed(6)}</p>
                  </div>
                </div>
              </div>
              
              <div className="flex justify-between items-center mb-6">
                <div className="text-center">
                  <div className="w-24 h-24 mx-auto mb-1 bg-gray-200 rounded-lg flex items-center justify-center">
                    <span className="text-xs text-gray-500">Logo</span>
                  </div>
                  <p className="text-xs">Official Logo</p>
                </div>
                <div className="text-center">
                  <div className="w-48 h-48 mx-auto mb-1 bg-gray-200 rounded-lg flex items-center justify-center">
                    <span className="text-xs text-gray-500">PM Modi</span>
                  </div>
                  <p className="text-xs">PM Modi</p>
                </div>
              </div>
              
              <div className="text-center">
                <p className="font-semibold text-sm">"Building safer roads for a better India"</p>
                <p className="text-xs text-gray-600 mt-1">- Pothole Indi Initiative in collaboration with Government of India</p>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4">
            {/* Download Certificate */}
            <button
              onClick={downloadCertificate}
              className="flex-1 bg-black text-white py-3 px-4 rounded-lg hover:bg-gray-800 transition-colors duration-200"
            >
              üì• Download Certificate
            </button>

            {/* Share on Twitter with Image */}
            <button
              onClick={prepareTwitterShareWithImage}
              disabled={isPreparingShare}
              className={`flex-1 py-3 px-4 rounded-lg transition-colors duration-200 text-center ${
                isPreparingShare
                  ? 'bg-gray-400 text-white cursor-not-allowed'
                  : 'bg-blue-500 text-white hover:bg-blue-600'
              }`}
            >
              {isPreparingShare ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Preparing Share...
                </>
              ) : (
                'üê¶ Share on Twitter with Image'
              )}
            </button>
          </div>

          {/* Twitter Sharing Instructions */}
          {isPreparingShare && (
            <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <h4 className="font-bold text-blue-800 mb-2">How to share on Twitter:</h4>
              <p className="text-sm text-blue-700">
                A certificate has been downloaded to your device. In the Twitter window that opens, 
                attach the downloaded certificate image and click "Tweet" to share your report 
                with the Ministry of Road Transport and Highways (@MoRTHIndia).
              </p>
            </div>
          )}

          {/* Original Twitter Share Link (as fallback) */}
          <div className="mt-4 text-center">
            <p className="text-sm text-gray-600 mb-2">
              Or share directly without image:
            </p>
            <a
              href={generateTwitterShare()}
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-500 hover:text-blue-700 text-sm font-medium"
            >
              Share on Twitter (text only)
            </a>
          </div>

          {/* Social Sharing */}
          <div className="mt-6 text-center">
            <p className="text-sm text-gray-600 mb-2">
              Help spread awareness by sharing this report!
            </p>
            <div className="flex justify-center space-x-2">
              <a
                href={`https://wa.me/?text=I%20just%20reported%20a%20pothole%20using%20Pothole%20Indi!%20Let's%20make%20our%20roads%20safer.%20Visit:%20pothole-indi.vercel.app`}
                target="_blank"
                rel="noopener noreferrer"
                className="bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600"
              >
                WhatsApp
              </a>
              <a
                href={`https://www.facebook.com/sharer/sharer.php?u=pothole-indi.vercel.app`}
                target="_blank"
                rel="noopener noreferrer"
                className="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700"
              >
                Facebook
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CertificateModal;